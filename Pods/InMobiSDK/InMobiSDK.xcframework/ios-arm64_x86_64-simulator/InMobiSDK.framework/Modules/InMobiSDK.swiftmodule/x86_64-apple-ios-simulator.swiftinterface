// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name InMobiSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
import AppTrackingTransparency
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreLocation
import CoreTelephony
import Foundation
@_exported import InMobiSDK
import InMobiSDK.Private
import StoreKit.SKAdImpression
import SQLite3
import StoreKit
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers @objc public class IMBannerPreloadManager : ObjectiveC.NSObject {
  @objc public func preload()
  @objc public func load()
  @objc deinit
}
@frozen @objc public enum IMStatusCode : Swift.Int {
  case networkUnReachable
  case noFill
  case requestInvalid
  case requestPending
  case requestTimedOut
  case multipleLoadsOnSameInstance
  case internalError
  case serverError
  case adActive
  case earlyRefreshRequest
  case droppingNetworkRequest
  case incorrectPlacementID
  case sdkNotInitialised
  case invalidBannerframe
  case invalidAudioFrame
  case audioDisabled = 22
  case audioDeviceVolumeLow = 23
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class IMRequestStatus : Foundation.NSError {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class IMMovableView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var isMovable: Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public func resetPosition()
  @objc deinit
}
@objc public protocol IMInterstitialDelegate {
  @objc optional func interstitial(_ interstitial: InMobiSDK.IMInterstitial, didReceiveWithMetaInfo metaInfo: InMobiSDK.IMAdMetaInfo)
  @objc optional func interstitial(_ interstitial: InMobiSDK.IMInterstitial, didFailToReceiveWithError error: Swift.Error)
  @objc optional func interstitialDidReceiveAd(_ interstitial: InMobiSDK.IMInterstitial)
  @objc optional func interstitialDidFinishLoading(_ interstitial: InMobiSDK.IMInterstitial)
  @objc optional func interstitial(_ interstitial: InMobiSDK.IMInterstitial, didFailToLoadWithError error: InMobiSDK.IMRequestStatus)
  @objc optional func interstitialAdImpressed(_ interstitial: InMobiSDK.IMInterstitial)
  @objc optional func interstitialWillPresent(_ interstitial: InMobiSDK.IMInterstitial)
  @objc optional func interstitialDidPresent(_ interstitial: InMobiSDK.IMInterstitial)
  @objc optional func interstitial(_ interstitial: InMobiSDK.IMInterstitial, didFailToPresentWithError error: InMobiSDK.IMRequestStatus)
  @objc optional func interstitialWillDismiss(_ interstitial: InMobiSDK.IMInterstitial)
  @objc optional func interstitialDidDismiss(_ interstitial: InMobiSDK.IMInterstitial)
  @objc optional func interstitial(_ interstitial: InMobiSDK.IMInterstitial, didInteractWithParams params: [Swift.String : Any]?)
  @objc optional func interstitial(_ interstitial: InMobiSDK.IMInterstitial, rewardActionCompletedWithRewards rewards: [Swift.String : Any])
  @objc optional func userWillLeaveApplicationFromInterstitial(_ interstitial: InMobiSDK.IMInterstitial)
}
@objc public class IMUserDataModel : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var phoneNumber: InMobiSDK.IMUserDataTypes?
  @objc public var emailId: InMobiSDK.IMUserDataTypes?
  @objc public var extras: [Swift.String : Any]?
  @objc required public init(phoneNumber: InMobiSDK.IMUserDataTypes?, emailId: InMobiSDK.IMUserDataTypes?, extras: [Swift.String : Any]?)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func isEqual(_ other: Any?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class IMSdk : ObjectiveC.NSObject {
  @objc public class func initWithAccountID(_ accountID: Swift.String, andCompletionHandler completionBlock: ((Swift.Error?) -> Swift.Void)? = nil)
  @objc public class func initWithAccountID(_ accountID: Swift.String, consentDictionary: [Swift.String : Any]?, andCompletionHandler completionBlock: ((Swift.Error?) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "Please use new API initWithAccountID:consentDictionary:andCompletionHandler: as this API can be removed in future")
  @objc public class func initWithAccountID(_ accountID: Swift.String, consentDictionary: [Swift.String : Any]?)
  @available(*, deprecated, message: "Please use new API initWithAccountID:andCompletionHandler: as this API can be removed in future")
  @objc public class func initWithAccountID(_ accountID: Swift.String)
  @objc public class func updateGDPRConsent(_ consentDictionary: [Swift.String : Any]?)
  @objc public class func setPartnerGDPRConsent(_ consentDictionary: [Swift.String : Any]?)
  @objc public class func setIsAgeRestricted(_ isRestricted: Swift.Bool)
  @objc public class func getVersion() -> Swift.String
  @objc public class func setLogLevel(_ desiredLogLevel: InMobiSDK.IMSDKLogLevel)
  @objc deinit
}
extension InMobiSDK.IMSdk {
  @objc dynamic public class func getToken() -> Swift.String?
  @objc dynamic public class func getTokenWithExtras(_ extras: [Swift.String : Any]?, andKeywords keywords: Swift.String?) -> Swift.String?
}
extension InMobiSDK.IMSdk {
  @objc dynamic public class func setAge(_ age: Swift.Int)
  @objc dynamic public class func setAreaCode(_ areaCode: Swift.String?)
  @objc dynamic public class func setAgeGroup(_ ageGroup: InMobiSDK.IMSDKAgeGroup)
  @objc dynamic public class func setYearOfBirth(_ yearOfBirth: Swift.Int)
  @objc dynamic public class func setEducation(_ education: InMobiSDK.IMSDKEducation)
  @objc dynamic public class func setGender(_ gender: InMobiSDK.IMSDKGender)
  @objc dynamic public class func setInterests(_ interests: Swift.String?)
  @objc dynamic public class func setLanguage(_ language: Swift.String?)
  @objc dynamic public class func setLocationWithCity(_ city: Swift.String?, state: Swift.String?, country: Swift.String?)
  @objc dynamic public class func setLocation(_ location: CoreLocation.CLLocation?)
  @objc dynamic public class func setPostalCode(_ postalcode: Swift.String?)
}
extension InMobiSDK.IMSdk {
  @objc dynamic public class func shouldAutoManageAVAudioSession(_ value: Swift.Bool)
  @objc dynamic public class func setMute(_ shouldMute: Swift.Bool)
  @objc dynamic public class func setPublisherProvidedUnifiedId(_ ids: [Swift.String : Any])
}
@objc @frozen public enum IMAudioStatus : Swift.Int {
  case playing = 1
  case paused
  case completed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol IMAudioDelegate {
  @objc optional func audioAdDidFinishLoading(_ audioAd: InMobiSDK.IMAudio)
  @objc optional func audioAdDidBecomeVisible(_ audioAd: InMobiSDK.IMAudio)
  @objc optional func audioAd(_ audioAd: InMobiSDK.IMAudio, didReceiveWithMetaInfo info: InMobiSDK.IMAdMetaInfo)
  @objc optional func audioAd(_ audioAd: InMobiSDK.IMAudio, didFailToLoadWithError error: InMobiSDK.IMRequestStatus)
  @objc optional func audioAd(_ audioAd: InMobiSDK.IMAudio, didFailToShowWithError error: InMobiSDK.IMRequestStatus)
  @objc optional func audioAdImpressed(_ audioAd: InMobiSDK.IMAudio)
  @objc optional func audioAd(_ audioAd: InMobiSDK.IMAudio, didInteractWithParams params: [Swift.String : Any]?)
  @objc optional func audioAdWillPresentScreen(_ audioAd: InMobiSDK.IMAudio)
  @objc optional func audioAdDidPresentScreen(_ audioAd: InMobiSDK.IMAudio)
  @objc optional func audioAdWillDismissScreen(_ audioAd: InMobiSDK.IMAudio)
  @objc optional func audioAdDidDismissScreen(_ audioAd: InMobiSDK.IMAudio)
  @objc optional func userWillLeaveApplicationFromAudioAd(_ audioAd: InMobiSDK.IMAudio)
  @objc optional func audioAd(_ audioAd: InMobiSDK.IMAudio, rewardActionCompletedWithRewards rewards: [Swift.String : Any])
  @objc optional func audioAd(_ audioAd: InMobiSDK.IMAudio, audioStatusChanged status: InMobiSDK.IMAudioStatus)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class IMBanner : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var placementId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: InMobiSDK.IMBannerDelegate?
  @objc @_Concurrency.MainActor(unsafe) weak public var audioDelegate: InMobiSDK.IMBannerAudioDelegate? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var refreshInterval: Swift.Int {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var keywords: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var extras: [Swift.String : Any]? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var transitionAnimation: UIKit.UIView.AnimationTransition {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var creativeId: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var preloadManager: InMobiSDK.IMBannerPreloadManager {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isAudioAd: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override convenience dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreFoundation.CGRect, placementId: Swift.Int64)
  @objc @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, placementId: Swift.Int64, delegate: InMobiSDK.IMBannerDelegate?)
  @objc @_Concurrency.MainActor(unsafe) public func load()
  @objc @_Concurrency.MainActor(unsafe) public func load(_ response: Foundation.Data)
  @objc @_Concurrency.MainActor(unsafe) public func shouldAutoRefresh(_ shouldAutoRefresh: Swift.Bool)
  @objc @_Concurrency.MainActor(unsafe) public func getAdMetaInfo() -> [Swift.String : Any]?
  @objc @_Concurrency.MainActor(unsafe) public func setWatermark(with watermark: InMobiSDK.IMWatermark)
  @objc @_Concurrency.MainActor(unsafe) public func cancel()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class IMInterstitialPreloadManager : ObjectiveC.NSObject {
  @objc public func preload()
  @objc public func load()
  @objc deinit
}
@objc public protocol IMBannerDelegate {
  @objc optional func bannerDidFinishLoading(_ banner: InMobiSDK.IMBanner)
  @objc optional func banner(_ banner: InMobiSDK.IMBanner, didReceiveWithMetaInfo info: InMobiSDK.IMAdMetaInfo)
  @objc optional func banner(_ banner: InMobiSDK.IMBanner, didFailToReceiveWithError error: InMobiSDK.IMRequestStatus)
  @objc optional func banner(_ banner: InMobiSDK.IMBanner, didFailToLoadWithError error: InMobiSDK.IMRequestStatus)
  @objc optional func bannerAdImpressed(_ banner: InMobiSDK.IMBanner)
  @objc optional func banner(_ banner: InMobiSDK.IMBanner, didInteractWithParams params: [Swift.String : Any]?)
  @objc optional func userWillLeaveApplicationFromBanner(_ banner: InMobiSDK.IMBanner)
  @objc optional func bannerWillPresentScreen(_ banner: InMobiSDK.IMBanner)
  @objc optional func bannerDidPresentScreen(_ banner: InMobiSDK.IMBanner)
  @objc optional func bannerWillDismissScreen(_ banner: InMobiSDK.IMBanner)
  @objc optional func bannerDidDismissScreen(_ banner: InMobiSDK.IMBanner)
  @objc optional func banner(_ banner: InMobiSDK.IMBanner, rewardActionCompletedWithRewards rewards: [Swift.String : Any])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class IMUnifiedIdService : ObjectiveC.NSObject {
  @objc public class func push(_ data: InMobiSDK.IMUserDataModel?)
  @objc public class func reset()
  @objc public class func fetchUnifiedIds(_ delegate: InMobiSDK.IMUnifiedIdDelegate?)
  @objc public class func enableDebugMode(_ debugMode: Swift.Bool)
  @objc deinit
}
#warning("Telemetry Code Dependency: This enum is already defined in ObjC file named IMTelemetryEvent")
#warning("Uncomment enums here and remove enum defined in objC in class IMTelemetoryFactory.h")
@objc public protocol IMUnifiedIdDelegate {
  @objc func onFetchCompleted(_ response: [Swift.String : Any]?, error: Foundation.NSError?)
}
@objc public class IMNative : ObjectiveC.NSObject {
  @objc public var placementId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc weak public var delegate: InMobiSDK.IMNativeDelegate?
  @objc public var keywords: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var extras: [Swift.String : Any]? {
    @objc get
    @objc set
  }
  @objc public var contentUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var customAdContent: Swift.String? {
    @objc get
  }
  @objc public var adTitle: Swift.String? {
    @objc get
  }
  @objc public var adDescription: Swift.String? {
    @objc get
  }
  @objc public var adIcon: UIKit.UIImage? {
    @objc get
  }
  @objc public var adCtaText: Swift.String? {
    @objc get
  }
  @objc public var adRating: Swift.String? {
    @objc get
  }
  @objc public var adLandingPageUrl: Foundation.URL? {
    @objc get
  }
  @objc public var isAppDownload: Swift.Bool {
    @objc get
  }
  @objc public var creativeId: Swift.String? {
    @objc get
  }
  @objc convenience public init(placementId: Swift.Int64)
  @objc public init(placementId: Swift.Int64, delegate: InMobiSDK.IMNativeDelegate?)
  @objc public func primaryView(ofWidth width: CoreFoundation.CGFloat) -> UIKit.UIView?
  @objc public func load()
  @objc public func load(_ response: Foundation.Data)
  @objc public func isReady() -> Swift.Bool
  @objc public func reportAdClickAndOpenLandingPage()
  @objc public func recyclePrimaryView()
  @objc public func getAdMetaInfo() -> [Swift.String : Any]?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class IMPrivacyCompliance : ObjectiveC.NSObject {
  @objc public static func setDoNotSell(_ doNotSell: Swift.Bool)
  @objc public static func setUSPrivacyString(_ privacyString: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class IMUserDataTypes : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var md5: Swift.String?
  @objc public var sha1: Swift.String?
  @objc public var sha256: Swift.String?
  @objc required public init(md5: Swift.String?, sha1: Swift.String?, sha256: Swift.String?)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func isEqual(_ other: Any?) -> Swift.Bool
  @objc deinit
}
@objc @frozen public enum IMBannerAudioStatus : Swift.Int {
  case playing = 1
  case paused
  case completed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol IMBannerAudioDelegate {
  @objc optional func banner(_ banner: InMobiSDK.IMBanner, audioStatusChanged status: InMobiSDK.IMBannerAudioStatus)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class IMAudio : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: InMobiSDK.IMAudioDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var placementId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var keywords: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var extras: [Swift.String : Any]? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var transitionAnimation: UIKit.UIView.AnimationTransition {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var creativeId: Swift.String? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override convenience dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) convenience public init(frame: CoreFoundation.CGRect, placementId: Swift.Int64)
  @objc @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, placementId: Swift.Int64, delegate: InMobiSDK.IMAudioDelegate?)
  @objc @_Concurrency.MainActor(unsafe) public func getAdMetaInfo() -> [Swift.String : Any]?
  @objc deinit
}
extension InMobiSDK.IMAudio {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func load()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func show()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func cancel()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
}
@_inheritsConvenienceInitializers @objc public class IMBannerAudioHandler : ObjectiveC.NSObject {
  @objc public static func setAudioEnabled(_ isEnabled: Swift.Bool)
  @objc public func onView(_ view: UIKit.UIView, addBannerAudioDelegate delegate: InMobiSDK.IMBannerAudioDelegate)
  @objc override dynamic public init()
  @objc deinit
}
#warning("Long Term: Need to Re Name to IMImpressionType")
#warning("Long Term: Need relook as per old IMInMobiViewabilityModel model after renderview is converted")
#warning("Convert to camel case")
@_hasMissingDesignatedInitializers @objc public class IMAdMetaInfo : ObjectiveC.NSObject {
  @objc public var creativeID: Swift.String? {
    get
  }
  @objc public var bidInfo: [Swift.String : Any] {
    get
  }
  @objc public func getBid() -> Swift.Double
  @objc deinit
}
#warning("Long Term: IMOMImpressionType may need to be declared in IMCommonUtils")
@objc public class IMInterstitial : ObjectiveC.NSObject {
  @objc public var placementId: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc weak public var delegate: InMobiSDK.IMInterstitialDelegate?
  @objc public var keywords: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var extras: [Swift.String : Any]? {
    @objc get
    @objc set
  }
  @objc public var contentUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var creativeId: Swift.String? {
    @objc get
  }
  @objc public var preloadManager: InMobiSDK.IMInterstitialPreloadManager {
    @objc get
  }
  @objc convenience public init(placementId: Swift.Int64)
  @objc public init(placementId: Swift.Int64, delegate: InMobiSDK.IMInterstitialDelegate?)
  @objc public func load()
  @objc public func load(_ response: Foundation.Data)
  @objc public func isReady() -> Swift.Bool
  @objc public func show(from viewController: UIKit.UIViewController)
  @objc public func show(from viewController: UIKit.UIViewController, with animationType: InMobiSDK.IMInterstitialAnimationType)
  @objc public func getAdMetaInfo() -> [Swift.String : Any]?
  @objc public func setWatermark(with watermark: InMobiSDK.IMWatermark)
  @objc public func cancel()
  @objc deinit
}
@objc public class IMWatermark : ObjectiveC.NSObject {
  @objc public var imageData: Foundation.Data {
    get
  }
  @objc public init(imageData: Foundation.Data)
  @objc deinit
}
#warning("Post Swift Migration: file not used yet")
@objc public protocol IMNativeDelegate {
  @objc optional func nativeDidFinishLoading(_ native: InMobiSDK.IMNative)
  @objc optional func native(_ native: InMobiSDK.IMNative, didFailToLoadWithError error: InMobiSDK.IMRequestStatus)
  @objc optional func nativeWillPresentScreen(_ native: InMobiSDK.IMNative)
  @objc optional func nativeDidPresentScreen(_ native: InMobiSDK.IMNative)
  @objc optional func nativeWillDismissScreen(_ native: InMobiSDK.IMNative)
  @objc optional func nativeDidDismissScreen(_ native: InMobiSDK.IMNative)
  @objc optional func userWillLeaveApplicationFromNative(_ native: InMobiSDK.IMNative)
  @objc optional func nativeAdImpressed(_ native: InMobiSDK.IMNative)
  @objc optional func native(_ native: InMobiSDK.IMNative, didInteractWithParams params: [Swift.String : Any]?)
  @objc optional func nativeDidFinishPlayingMedia(_ native: InMobiSDK.IMNative)
  @objc optional func userDidSkipPlayingMediaFromNative(_ native: InMobiSDK.IMNative)
  @objc optional func native(_ native: InMobiSDK.IMNative, adAudioStateChanged audioStateMuted: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class IMCommonConstants : ObjectiveC.NSObject {
  @objc public static let IM_GDPR_CONSENT_AVAILABLE: Swift.String
  @objc public static let IM_GDPR_CONSENT_IAB: Swift.String
  @objc public static let IM_SUBJECT_TO_GDPR: Swift.String
  @objc public static let IM_PARTNER_GDPR_CONSENT_AVAILABLE: Swift.String
  @objc public static let IM_PARTNER_GDPR_APPLIES: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@frozen @objc public enum IMSDKLogLevel : Swift.Int {
  case none
  case error
  case debug
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@frozen @objc public enum IMSDKGender : Swift.Int {
  case male = 1
  case female
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@frozen @objc public enum IMSDKEducation : Swift.Int {
  case highSchoolOrLess = 1
  case collageOrGraduate
  case postGraduateOrAbove
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@frozen @objc public enum IMSDKAgeGroup : Swift.Int {
  case below18 = 1
  case between18And24
  case between25And29
  case between30And34
  case between35And44
  case between45And54
  case between55And65
  case above65
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@frozen @objc public enum IMInterstitialAnimationType : Swift.Int {
  case coverVertical
  case flipHorizontal
  case asNone
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Swift.String : Swift.Error {
}
extension InMobiSDK.IMStatusCode : Swift.Equatable {}
extension InMobiSDK.IMStatusCode : Swift.Hashable {}
extension InMobiSDK.IMStatusCode : Swift.RawRepresentable {}
extension InMobiSDK.IMStatusCode : Swift.Sendable {}
extension InMobiSDK.IMAudioStatus : Swift.Equatable {}
extension InMobiSDK.IMAudioStatus : Swift.Hashable {}
extension InMobiSDK.IMAudioStatus : Swift.RawRepresentable {}
extension InMobiSDK.IMAudioStatus : Swift.Sendable {}
extension InMobiSDK.IMBannerAudioStatus : Swift.Equatable {}
extension InMobiSDK.IMBannerAudioStatus : Swift.Hashable {}
extension InMobiSDK.IMBannerAudioStatus : Swift.RawRepresentable {}
extension InMobiSDK.IMBannerAudioStatus : Swift.Sendable {}
extension InMobiSDK.IMSDKLogLevel : Swift.Equatable {}
extension InMobiSDK.IMSDKLogLevel : Swift.Hashable {}
extension InMobiSDK.IMSDKLogLevel : Swift.RawRepresentable {}
extension InMobiSDK.IMSDKLogLevel : Swift.Sendable {}
extension InMobiSDK.IMSDKGender : Swift.Equatable {}
extension InMobiSDK.IMSDKGender : Swift.Hashable {}
extension InMobiSDK.IMSDKGender : Swift.RawRepresentable {}
extension InMobiSDK.IMSDKGender : Swift.Sendable {}
extension InMobiSDK.IMSDKEducation : Swift.Equatable {}
extension InMobiSDK.IMSDKEducation : Swift.Hashable {}
extension InMobiSDK.IMSDKEducation : Swift.RawRepresentable {}
extension InMobiSDK.IMSDKEducation : Swift.Sendable {}
extension InMobiSDK.IMSDKAgeGroup : Swift.Equatable {}
extension InMobiSDK.IMSDKAgeGroup : Swift.Hashable {}
extension InMobiSDK.IMSDKAgeGroup : Swift.RawRepresentable {}
extension InMobiSDK.IMSDKAgeGroup : Swift.Sendable {}
extension InMobiSDK.IMInterstitialAnimationType : Swift.Equatable {}
extension InMobiSDK.IMInterstitialAnimationType : Swift.Hashable {}
extension InMobiSDK.IMInterstitialAnimationType : Swift.RawRepresentable {}
extension InMobiSDK.IMInterstitialAnimationType : Swift.Sendable {}
